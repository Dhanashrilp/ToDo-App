{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","handleSubmit","preventDefault","onSubmit","id","Math","floor","random","text","className","placeholder","onChange","name","ref","onClick","type","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","TodoList","setTodos","test","newTodos","updatedTodos","removeArr","filter","todoId","newValue","prev","item","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gMAiEeA,MA/Df,SAAkBC,GACd,MAA0BC,mBAASD,EAAME,KAAOF,EAAME,KAAKC,MAAQ,KAAnE,mBAAOC,EAAP,KAAcC,EAAd,KAEMC,EAAWC,iBAAO,MAExBC,qBAAU,WACNF,EAASG,QAAQC,WAGrB,IAAMC,EAAe,SAAAC,GACjBP,EAASO,EAAEC,OAAOV,QAGhBW,EAAe,SAAAF,GACjBA,EAAEG,iBAEFf,EAAMgB,SAAS,CACXC,GAAIC,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBC,KAAMjB,IAIVC,EAAS,MAEb,OACI,sBAAMW,SAAUF,EAAcQ,UAAU,YAAxC,SAEQtB,EAAME,KACF,qCACI,uBACIqB,YAAY,mBACZpB,MAAOC,EACPoB,SAAUb,EACVc,KAAK,OACLC,IAAKpB,EACLgB,UAAU,oBAEd,wBAAQK,QAASb,EAAcQ,UAAU,mBAAzC,uBAKJ,qCACI,uBACIM,KAAK,OACLL,YAAY,aACZpB,MAAOC,EACPqB,KAAK,OACLH,UAAU,aACVE,SAAUb,EACVe,IAAKpB,IAET,wBAAQqB,QAASb,EAAcQ,UAAU,cAAzC,4B,eCXTO,MAtCf,YAAgE,IAAhDC,EAA+C,EAA/CA,MAAOC,EAAwC,EAAxCA,aAAcC,EAA0B,EAA1BA,WAAYC,EAAc,EAAdA,WAC7C,EAAwBhC,mBAAS,CAC7BgB,GAAI,KACJd,MAAO,KAFX,mBAAOD,EAAP,KAAagC,EAAb,KAcA,OAAIhC,EAAKe,GACE,cAAC,EAAD,CAAUf,KAAMA,EAAMc,SATZ,SAAAb,GACjB8B,EAAW/B,EAAKe,GAAId,GACpB+B,EAAQ,CACJjB,GAAI,OACJd,MAAO,SASR2B,EAAMK,KAAI,SAACC,EAAMC,GAAP,OACb,sBAAKf,UAAWc,EAAKE,WAAa,oBAAsB,WAAxD,UAGI,qBAAmBX,QAAS,kBAAMI,EAAaK,EAAKnB,KAApD,SACKmB,EAAKf,MADAe,EAAKnB,IAGf,sBAAKK,UAAU,QAAf,UACI,cAAC,IAAD,CACIK,QAAS,kBAAMK,EAAWI,EAAKnB,KAC/BK,UAAU,gBAEd,cAAE,IAAF,CAASK,QAAS,kBAAMO,EAAQ,CAAEjB,GAAImB,EAAKnB,GAAId,MAAOiC,EAAKf,QACvDC,UAAU,mBAXbe,OCuBFE,MA9Cf,WACI,MAA0BtC,mBAAS,IAAnC,mBAAO6B,EAAP,KAAcU,EAAd,KAiCA,OACI,gCACI,2CACA,cAAC,EAAD,CAAUxB,SAlCF,SAAAoB,GACZ,GAAKA,EAAKf,OAAQ,QAAQoB,KAAKL,EAAKf,MAApC,CAGA,IAAMqB,EAAQ,CAAIN,GAAJ,mBAAaN,IAC3BU,EAASE,OA8BL,cAAC,EAAD,CAAMZ,MAAOA,EACTC,aAfS,SAAAd,GACjB,IAAI0B,EAAeb,EAAMK,KAAI,SAAAC,GAIzB,OAHIA,EAAKnB,KAAOA,IACZmB,EAAKE,YAAcF,EAAKE,YAErBF,KAEXI,EAASG,IASDX,WArBO,SAAAf,GACf,IAAM2B,EAAY,YAAId,GAAOe,QAAO,SAAAT,GAAI,OAAIA,EAAKnB,KAAOA,KACxDuB,EAASI,IAoBDX,WA9BO,SAACa,EAAQC,GACnBA,EAAS1B,OAAQ,QAAQoB,KAAKM,EAAS1B,OAI5CmB,GAAS,SAAAQ,GAAI,OAAIA,EAAKb,KAAI,SAAAc,GAAI,OAAKA,EAAKhC,KAAO6B,EAASC,EAAWE,eCR5DC,MARf,WACE,OACE,qBAAK5B,UAAU,WAAf,SACE,cAAC,EAAD,OCFN6B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.e5a201bb.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\r\n\r\nfunction TodoForm(props) {\r\n    const [input, setInput] = useState(props.edit ? props.edit.value : ' ')\r\n\r\n    const inputRef = useRef(null)\r\n\r\n    useEffect(() => {\r\n        inputRef.current.focus()\r\n    })\r\n\r\n    const handleChange = e => {\r\n        setInput(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault()\r\n\r\n        props.onSubmit({\r\n            id: Math.floor(Math.random() * 10000),\r\n            text: input\r\n\r\n        })\r\n\r\n        setInput(' ')\r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit} className='todo-form'>\r\n            {\r\n                props.edit ? (\r\n                    <>\r\n                        <input\r\n                            placeholder='Update your item'\r\n                            value={input}\r\n                            onChange={handleChange}\r\n                            name='text'\r\n                            ref={inputRef}\r\n                            className='todo-input edit'\r\n                        />\r\n                        <button onClick={handleSubmit} className='todo-button edit'>\r\n                            Update\r\n                </button>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <input\r\n                            type='text'\r\n                            placeholder='Add a todo'\r\n                            value={input}\r\n                            name='text'\r\n                            className='todo-input'\r\n                            onChange={handleChange}\r\n                            ref={inputRef}\r\n                        />\r\n                        <button onClick={handleSubmit} className='todo-button'>\r\n                            Add todo</button>\r\n                    </>\r\n                )\r\n            }\r\n        </form >\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default TodoForm\r\n","import React, { useState } from 'react'\r\nimport TodoForm from './TodoForm'\r\nimport { RiCloseCircleLine } from 'react-icons/ri'\r\nimport { TiEdit } from 'react-icons/ti'\r\n\r\nfunction Todo({ todos, completeTodo, removeTodo, updateTodo }) {\r\n    const [edit, setEdit] = useState({\r\n        id: null,\r\n        value: ''\r\n    })\r\n\r\n\r\n    const submitUpdate = value => {\r\n        updateTodo(edit.id, value)\r\n        setEdit({\r\n            id: 'null',\r\n            value: ' '\r\n        })\r\n    }\r\n\r\n    if (edit.id) {\r\n        return <TodoForm edit={edit} onSubmit={submitUpdate} />\r\n    }\r\n\r\n\r\n    return todos.map((todo, index) => (\r\n        <div className={todo.isComplete ? 'todo-row complete' : 'todo-row'}\r\n            key={index}\r\n        >\r\n            <div key={todo.id} onClick={() => completeTodo(todo.id)}>\r\n                {todo.text}\r\n            </div>\r\n            <div className=\"icons\">\r\n                <RiCloseCircleLine\r\n                    onClick={() => removeTodo(todo.id)}\r\n                    className='delete-icon'\r\n                />\r\n                < TiEdit onClick={() => setEdit({ id: todo.id, value: todo.text })}\r\n                    className='edit-icon' />\r\n            </div>\r\n        </div >\r\n    ))\r\n}\r\nexport default Todo\r\n","import React, { useState } from 'react'\r\nimport TodoForm from './TodoForm'\r\nimport Todo from './Todo'\r\n\r\nfunction TodoList() {\r\n    const [todos, setTodos] = useState([])\r\n\r\n    const addTodo = todo => {\r\n        if (!todo.text || /^\\s*$/.test(todo.text)) {\r\n            return\r\n        }\r\n        const newTodos = [todo, ...todos]\r\n        setTodos(newTodos)\r\n    }\r\n\r\n    const updateTodo = (todoId, newValue) => {\r\n        if (!newValue.text || /^\\s*$/.test(newValue.text)) {\r\n            return\r\n\r\n        }\r\n        setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item)))\r\n    }\r\n\r\n    const removeTodo = id => {\r\n        const removeArr = [...todos].filter(todo => todo.id !== id)\r\n        setTodos(removeArr)\r\n    }\r\n\r\n    const completeTodo = id => {\r\n        let updatedTodos = todos.map(todo => {\r\n            if (todo.id === id) {\r\n                todo.isComplete = !todo.isComplete\r\n            }\r\n            return todo\r\n        })\r\n        setTodos(updatedTodos)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Todo List</h1>\r\n            <TodoForm onSubmit={addTodo} />\r\n            <Todo todos={todos}\r\n                completeTodo={completeTodo}\r\n                removeTodo={removeTodo}\r\n                updateTodo={updateTodo} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList\r\n","import React from 'react'\nimport './App.css';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  return (\n    <div className='todo-app'>\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}